jobs:
  build:
    name: Build
    outputs:
      changelog: ${{ steps.properties.outputs.changelog }}
      version: ${{ steps.properties.outputs.version }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Maximize Build Space
      run: 'sudo rm -rf /usr/share/dotnet

        sudo rm -rf /usr/local/lib/android

        sudo rm -rf /opt/ghc

        '
    - continue-on-error: true
      name: Fetch Sources
      uses: actions/checkout@v3
    - continue-on-error: true
      name: Gradle Wrapper Validation
      uses: gradle/wrapper-validation-action@v1.0.6
    - continue-on-error: true
      name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: zulu
        java-version: 17
    - continue-on-error: true
      id: properties
      name: Export Properties
      run: 'PROPERTIES="$(./gradlew properties --console=plain -q)"

        VERSION="$(echo "$PROPERTIES" | grep "^version:" | cut -f2- -d '' '')"

        NAME="$(echo "$PROPERTIES" | grep "^pluginName:" | cut -f2- -d '' '')"

        CHANGELOG="$(./gradlew getChangelog --unreleased --no-header --console=plain
        -q)"


        echo "version=$VERSION" >> $GITHUB_OUTPUT

        echo "name=$NAME" >> $GITHUB_OUTPUT

        echo "pluginVerifierHomeDir=~/.pluginVerifier" >> $GITHUB_OUTPUT


        echo "changelog<<EOF" >> $GITHUB_OUTPUT

        echo "$CHANGELOG" >> $GITHUB_OUTPUT

        echo "EOF" >> $GITHUB_OUTPUT


        ./gradlew listProductsReleases # prepare list of IDEs for Plugin Verifier

        '
      shell: bash
    - continue-on-error: true
      name: Run Tests
      run: ./gradlew check
    - continue-on-error: true
      if: ${{ failure() }}
      name: Collect Tests Result
      uses: actions/upload-artifact@v3
      with:
        name: tests-result
        path: ${{ github.workspace }}/build/reports/tests
    - continue-on-error: true
      name: Upload Code Coverage Report
      uses: codecov/codecov-action@v3
      with:
        files: ${{ github.workspace }}/build/reports/kover/xml/report.xml
    - continue-on-error: true
      name: Setup Plugin Verifier IDEs Cache
      uses: actions/cache@v3
      with:
        key: plugin-verifier-${{ hashFiles('build/listProductsReleases.txt') }}
        path: ${{ steps.properties.outputs.pluginVerifierHomeDir }}/ides
    - continue-on-error: true
      name: Run Plugin Verification tasks
      run: ./gradlew runPluginVerifier -Dplugin.verifier.home.dir=${{ steps.properties.outputs.pluginVerifierHomeDir
        }}
    - continue-on-error: true
      if: ${{ always() }}
      name: Collect Plugin Verifier Result
      uses: actions/upload-artifact@v3
      with:
        name: pluginVerifier-result
        path: ${{ github.workspace }}/build/reports/pluginVerifier
    - continue-on-error: true
      id: artifact
      name: Prepare Plugin Artifact
      run: 'cd ${{ github.workspace }}/build/distributions

        FILENAME=`ls *.zip`

        unzip "$FILENAME" -d content


        echo "filename=${FILENAME:0:-4}" >> $GITHUB_OUTPUT

        '
      shell: bash
    - continue-on-error: true
      name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ steps.artifact.outputs.filename }}
        path: ./build/distributions/content/*/*
  releaseDraft:
    if: github.event_name != 'pull_request'
    name: Release Draft
    needs: build
    permissions:
      contents: write
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Fetch Sources
      uses: actions/checkout@v3
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Remove Old Release Drafts
      run: "gh api repos/{owner}/{repo}/releases \\\n  --jq '.[] | select(.draft ==\
        \ true) | .id' \\\n  | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{}\n"
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Create Release Draft
      run: "gh release create v${{ needs.build.outputs.version }} \\\n  --draft \\\
        \n  --title \"v${{ needs.build.outputs.version }}\" \\\n  --notes \"$(cat\
        \ << 'EOM'\n${{ needs.build.outputs.changelog }}\nEOM\n)\""
name: Build
on:
  repository_dispatch:
    types: trigger-ga___build.yml
